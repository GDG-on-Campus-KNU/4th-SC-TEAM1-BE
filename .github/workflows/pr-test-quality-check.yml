name: üß™ PR Test and Quality Check üîç

on:
  pull_request:
    branches: [ main ]

jobs:
  test-and-analyze:
    name: Test and Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      
      - name: ‚òï Setup Java (JDK 21)
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: üõ†Ô∏è Validate Gradle
        uses: gradle/wrapper-validation-action@v3
      
      - name: üß™ Run Unit Tests
        run: ./gradlew test
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MOUNT_PATH: ${{ secrets.MOUNT_PATH }}
          DEFAULT_PROFILE_IMAGE_URL: ${{ secrets.DEFAULT_PROFILE_IMAGE_URL }}
      
      - name: üìä Generate JaCoCo Coverage Report
        run: ./gradlew jacocoTestReport
      
      - name: üîç Run SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.java.binaries=build/classes/java/main
            -Dsonar.sources=src/main
            -Dsonar.tests=src/test
            -Dsonar.java.coveragePlugin=jacoco
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
      
      - name: üêõ Run SpotBugs Check
        run: ./gradlew spotbugsMain
      
      - name: üìù Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: build/test-results/**/*.xml
      
      - name: üìù Make Coverage Markdown
        id: jacoco-coverage
        run: |
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          if [ -f $REPORT_PATH ]; then
            # Extract coverage data from XML report
            INSTRUCTION_COVERED=$(grep -oP 'type="INSTRUCTION".*?covered="\K[0-9]+' $REPORT_PATH)
            INSTRUCTION_MISSED=$(grep -oP 'type="INSTRUCTION".*?missed="\K[0-9]+' $REPORT_PATH)
            BRANCH_COVERED=$(grep -oP 'type="BRANCH".*?covered="\K[0-9]+' $REPORT_PATH)
            BRANCH_MISSED=$(grep -oP 'type="BRANCH".*?missed="\K[0-9]+' $REPORT_PATH)
            
            # Calculate percentages
            if [ -n "$INSTRUCTION_COVERED" ] && [ -n "$INSTRUCTION_MISSED" ]; then
              TOTAL_INSTRUCTIONS=$((INSTRUCTION_COVERED + INSTRUCTION_MISSED))
              INSTRUCTION_COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($INSTRUCTION_COVERED / $TOTAL_INSTRUCTIONS) * 100}")
            else
              INSTRUCTION_COVERAGE="N/A"
            fi
            
            if [ -n "$BRANCH_COVERED" ] && [ -n "$BRANCH_MISSED" ]; then
              TOTAL_BRANCHES=$((BRANCH_COVERED + BRANCH_MISSED))
              BRANCH_COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($BRANCH_COVERED / $TOTAL_BRANCHES) * 100}")
            else
              BRANCH_COVERAGE="N/A"
            fi
            
            # Create markdown report
            echo "coverage<<EOF" >> $GITHUB_OUTPUT
            echo "## üìä Code Coverage Report" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "| Ïú†Ìòï | Ïª§Î≤ÑÎ¶¨ÏßÄ |" >> $GITHUB_OUTPUT
            echo "| --- | --- |" >> $GITHUB_OUTPUT
            echo "| **Line Coverage** | ${INSTRUCTION_COVERAGE}% |" >> $GITHUB_OUTPUT
            echo "| **Branch Coverage** | ${BRANCH_COVERAGE}% |" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "ÏÉùÏÑ± ÏãúÍ∞Ñ: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "coverage=‚ùå JaCoCo report not found" >> $GITHUB_OUTPUT
          fi
      
      - name: üìà Add or Update Code Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: jacoco-coverage
          message: ${{ steps.jacoco-coverage.outputs.coverage }}
      
      - name: üìä Add SonarQube Quality Gate PR Comment
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt