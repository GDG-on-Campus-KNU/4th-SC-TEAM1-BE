plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.14'
}

group = 'com.gdg'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starter Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Security & JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // Database & Redis
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.23.1'
    implementation 'org.springframework.session:spring-session-data-redis'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Test Dependencies
    runtimeOnly 'com.h2database:h2'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-test'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // etc
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.7.0'

    // monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // 테스트 이후 자동으로 JaCoCo 리포트 생성
}

// JaCoCo 설정
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "**/controller/advice/**",
                "**/*ControllerAdvice.*"
            ])
        }))
    }
}

// SpotBugs 설정
spotbugs {
    toolVersion = '4.8.3'
    ignoreFailures = true  // PR에서 실패하지 않도록 설정
    reportsDir = file("$buildDir/reports/spotbugs")
    excludeFilter = file("spotbugs-exclude.xml") 
}

spotbugsMain {
    reports {
        html.required = true
        xml.required = true
    }
}

// 테스트 코드는 SpotBugs 검사에서 제외
spotbugsTest {
    enabled = false
}

// Gradle 버전 확인 작업
task printGradleVersion {
    doLast {
        println "Gradle Version: ${gradle.gradleVersion}"
    }
}
