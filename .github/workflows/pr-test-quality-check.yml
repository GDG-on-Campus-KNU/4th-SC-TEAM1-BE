name: 🧪 PR Test and Quality Check 🔍

on:
  pull_request:
    branches: [ main ]

jobs:
  test-and-analyze:
    name: Test and Code Quality Analysis
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
      
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: todak_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    
    steps:
      - name: 📥 Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for SonarQube analysis
      
      - name: ☕ Setup Java (JDK 21)
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: 🛠️ Validate Gradle
        uses: gradle/wrapper-validation-action@v3
      
      - name: 🔍 Verify Redis is running
        run: |
          sudo apt-get install -y redis-tools
          for i in {1..10}; do
            if redis-cli -h localhost -p 6379 ping; then
              echo "Redis is up and running!"
              break
            fi
            echo "Waiting for Redis to start... ($i/10)"
            sleep 3
          done
          redis-cli -h localhost -p 6379 ping

      - name: 🧪 Run Tests with Explicit Steps
        run: ./gradlew compileJava processResources compileTestJava processTestResources test
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: todak_test
          MOUNT_PATH: ${{ secrets.MOUNT_PATH }}
          DEFAULT_PROFILE_IMAGE_URL: ${{ secrets.DEFAULT_PROFILE_IMAGE_URL }}
      
      - name: 📊 Generate JaCoCo Coverage Report
        run: ./gradlew jacocoTestReport
      
      - name: 🔍 Run SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.java.binaries=build/classes/java/main
            -Dsonar.sources=src/main
            -Dsonar.tests=src/test
            -Dsonar.java.coveragePlugin=jacoco
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
      
      - name: 🐛 Run SpotBugs Check
        run: ./gradlew spotbugsMain
      
      - name: 📝 Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: build/test-results/**/*.xml

      - name: 🔍 Find Coverage Report Comments
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## 📊 Code Coverage Report'
          
      - name: 🗑️ Delete Previous Coverage Comment
        if: github.event_name == 'pull_request' && steps.find_comment.outputs.comment-id != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.find_comment.outputs.comment-id }}
            })
      
      - name: 📈 Add Code Coverage PR Comment
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 60
          min-coverage-changed-files: 80
          title: 📊 Code Coverage Report
          update-comment: true
          pull-request-id: ${{ github.event.pull_request.number }}
      
      - name: 📊 Add SonarQube Quality Gate PR Comment
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt