name: 🚀 Build and Deploy to Kubernetes 🐳

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        command: redis-server --requirepass myredispassword
        options: >-
          --health-cmd "redis-cli -a myredispassword ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
      
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: todak_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up Java (Temurin JDK 21)
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🛠️ Set up Gradle
        uses: gradle/wrapper-validation-action@v3

      - name: 🔍 Verify Redis is running
        run: |
          sudo apt-get install -y redis-tools
          for i in {1..10}; do
            if redis-cli -h localhost -p 6379 -a myredispassword ping; then
              echo "Redis is up and running!"
              break
            fi
            echo "Waiting for Redis to start... ($i/10)"
            sleep 3
          done
          redis-cli -h localhost -p 6379 -a myredispassword ping

      - name: 🏗️ Build with Gradle
        run: ./gradlew build
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: myredispassword
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: todak_test
          MOUNT_PATH: ${{ secrets.MOUNT_PATH }}
          DEFAULT_PROFILE_IMAGE_URL: ${{ secrets.DEFAULT_PROFILE_IMAGE_URL }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: 🔄 Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🐋 Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/todak:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/todak:latest

      - name: 🛠️ Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0'

      - name: 🔑 Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "$KUBECONFIG" > ~/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: 🚀 Apply Kubernetes Deployment
        run: |
          envsubst < ./k8s/deployment.yaml.template > deployment.yaml
          kubectl apply -f deployment.yaml --kubeconfig ~/.kube/config --insecure-skip-tls-verify
          kubectl set image deployment/todak todak=${{ secrets.DOCKER_USERNAME }}/todak:latest --kubeconfig ~/.kube/config --insecure-skip-tls-verify

      - name: ✅ Wait for rollout to complete
        run: |
          kubectl rollout status deployment/todak --kubeconfig ~/.kube/config --insecure-skip-tls-verify

      - name: 🗑️ Delete old Pods after successful rollout
        run: |
          echo "Fetching the most recently created Pod..."
          NEW_POD=$(kubectl get pods -l app=todak --sort-by=.metadata.creationTimestamp --kubeconfig ~/.kube/config --insecure-skip-tls-verify | head -n 1 | awk '{print $1}')
          echo "New Pod: $NEW_POD"
          
          echo "Deleting older Pods..."
          kubectl get pods -l app=todak --kubeconfig ~/.kube/config --insecure-skip-tls-verify --sort-by=.metadata.creationTimestamp | tail -n +2 | head -n -1 | awk '{print $1}' | xargs kubectl delete pod --kubeconfig ~/.kube/config --insecure-skip-tls-verify
